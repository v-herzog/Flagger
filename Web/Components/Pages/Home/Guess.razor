@using Flagger.Application.Entities
@using Flagger.Application.Interfaces

@inject IGameService gameService

<div>
    @if (game?.CurrentStage?.Flag?.Source is null || countryNames is null || !countryNames.Any())
    {
        <p>Loading...</p>
    }
    else
    {
        <p># @game.Score</p>

        <img src=@($"data:image/png;base64,{game.CurrentStage.Flag.Source}") alt="flag image" />
        
        <p>Which Country is this?</p>

        <select class="form-select" @onchange="@(args => selected = args.Value.ToString())">
            <option selected disabled>Choose...</option>
            @foreach (var country in countryNames)
            {
                <option value="@country.Key">@country.Value</option>
            }
        </select>

        <div class="row">
            <button type="button"
                    disabled="@(string.IsNullOrEmpty(selected))"
                    class=@(string.IsNullOrEmpty(selected) ? "btn btn-outline-success" : "btn btn-success")
                    @onclick="Validate">VALIDATE</button>    
        </div>
    }
</div>

@code {
    [Parameter]
    public Action OnValidation { get; set; }

    private IDictionary<string, string> countryNames;
    private string selected;
    private Game game;

    protected override async Task OnInitializedAsync()
    {
        await gameService.SetupFlag();

        this.game = gameService.Get();
        this.countryNames = await gameService.GetCountryNames();
    }

    private async Task Validate()
    {
        var result = await gameService.Validate(selected);
        if (result)
        {
            // Confeti
            // Sound
        }

        OnValidation.Invoke();
    }
}