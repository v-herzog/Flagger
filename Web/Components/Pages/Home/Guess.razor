@using Flagger.Application.Entities
@using Flagger.Application.Interfaces

@inject IGameService gameService

<div>
    @if (game?.CurrentStage?.Flag?.Source is null || countryNames is null || !countryNames.Any())
    {
        <p>Loading...</p>
    }
    else
    {
        <span class="badge text-bg-secondary mb-1">
            # @game.Score
        </span>

        <img src=@($"data:image/png;base64,{game.CurrentStage.Flag.Source}") alt="flag image" class="img-thumbnail mb-3" />
        
        <form>
            <div class="mb-5">
                <label for="countrySelect" class="form-label">Which Country is this?</label>
                <select id="countrySelect" class="form-select" @onchange="@(args => selected = args.Value.ToString())">
                    <option selected disabled>Choose...</option>
                    @foreach (var country in countryNames)
                    {
                        <option value="@country.Key">@country.Value</option>
                    }
                </select>
            </div>
            <button type="button"
                    disabled="@(string.IsNullOrEmpty(selected))"
                    class=@("col-12 mt-5 mb-3 btn " + (string.IsNullOrEmpty(selected) ? "btn-outline-success" : "btn-success"))
                    @onclick="Validate">
                VALIDATE
            </button>
        </form>
    }
</div>

@code {
    [Parameter]
    public Action<bool> OnValidation { get; set; }

    private IDictionary<string, string> countryNames;
    private string selected;
    private Game game;

    protected override async Task OnInitializedAsync()
    {
        await gameService.SetupFlag();

        this.game = gameService.Get();
        this.countryNames = await gameService.GetCountryNames();
    }

    private async Task Validate()
    {
        var result = await gameService.Validate(selected);
        OnValidation.Invoke(result);
    }
}